---
layout: layouts/base.njk
bodyClass: body-exploit
---

<div class="container" data-pagefind-body>

    <div class="side side-left">
        <div class="inner">
            <h4 class="head">Related Exploits</h4>
            <div class="related">
                {# Related exploits will be added when DOM loaded. #}
            </div>
        </div>
    </div>

    <div class="article-wrapper">
        <article>
            <div class="exploit-header">
                <h1 class="exploit-title">{{ title }}</h1>

                <p class="exploit-date">Last modified: {{ date | date('yyyy-MM-dd') }}</p>

                {%- if tags.length > 0 %}
                <div class="exploit-tags">
                    {% for tag in tags %}
                    <span class="exploit-tag">{{ tag }}</span>
                    {% endfor %}
                </div>
                {%- endif %}
            </div>

            <hr>

            <p class="exploit-description">{{ description }}</p>

            <div class="exploit-content">
                {{ content | safe }}
            </div>

            {%- if refs.length > 0 %}
            <div class="exploit-refs">
                <h2>References</h2>
                <ul>
                    {% for ref in refs %}
                        <li>
                            <a href="{{ ref }}">{{ ref }}</a>
                        </li>
                    {% endfor %}
                </ul>
            </div>
            {%- endif %}
        </article>
    </div>

    <div class="side side-right">
        <div class="inner">
        </div>
    </div>

</div>

<script>
    let pagefindAPI;
    document.addEventListener('DOMContentLoaded', async () => {
        pagefindAPI = await import("/pagefind/pagefind.js");
        getRelatedExploits();
    });

    // Get related exploits and add new elements to the parent one.
    async function getRelatedExploits() {
        let relatedElem = document.querySelector(".related");

        const exploitTagElems = document.getElementsByClassName("exploit-tag");
        let tags = [];

        if (exploitTagElems.length > 0) {
            for (let i = 0; i < exploitTagElems.length; i++) {
                tags.push(exploitTagElems[i].innerText);
            }
        }

        let randomTag = tags[Math.floor(Math.random()*tags.length)];
        const searchAPI = await pagefindAPI.search(randomTag);
        // const searchResults = await Promise.all(searchAPI.results.slice(0, 10).map(r => r.data()));
        const searchResults = searchAPI.results;
        shuffle(searchResults)
        if (searchResults.length > 0) {
            searchResults.forEach(async (res, idx) => {
                if (idx > 10) { return; }

                const resData = await res.data();
                const rUrl = resData.url;
                const rTitle = resData.meta.title;
                const rDesc = resData.meta.description;
                const rTags = resData.meta.tags;

                if (window.location.pathname == rUrl) {
                    return;
                }

                // Create a new element
                let pageElem = document.createElement('div');
                pageElem.classList.add("page");
                let aElem = document.createElement('a');
                aElem.innerText = rTitle;
                aElem.href = rUrl;
                pageElem.appendChild(aElem);
                // Add it to the "related" div.
                relatedElem.appendChild(pageElem);
            })
        }
    }

    // Shuffle array
    function shuffle(array) {
        array.sort(() => Math.random() - 0.5);
    }
</script>