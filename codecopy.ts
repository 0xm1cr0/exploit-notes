import { merge } from "lume/core/utils.ts";

import type { Site } from "lume/core.ts";

export interface ButtonStylesOptions {
    top: string;
    right: string;
    width: string;
    height: string;
    padding: string;
    background: string;
    backgroundHovered: string;
    border: string;
    outline: string;
    fontSize: string;
    fontWeight: string;
    color: string;
    opacity: string;
    transition: string;
}

export interface ResultStylesOptions {
    top: string;
    right: string;
    opacity: string;
    fontSize: string;
    fontStyle: string;
    fontWeight: string;
    color: string;
    pointerEvents: string;
    transition: string;
}

export interface Options {
    buttonText: string;
    buttonStyles: Partial<ButtonStylesOptions>;
    resultText: string;
    resultStyles: Partial<ResultStylesOptions>;
}

const defaults: Options = {
    buttonText: "Copy",
    buttonStyles: {
        top: "0",
        right: "0",
        width: "64px",
        height: "32px",
        padding: "8px 16px",
        background: "#555585",
        backgroundHovered: "#8888c8",
        border: "none",
        outline: "none",
        fontSize: "0.85em",
        fontWeight: "bold",
        color: "#efefef",
        opacity: "0",
        transition: "0.1s",
    },
    resultText: "Copied!",
    resultStyles: {
        top: "-30px",
        right: "10px",
        opacity: "0",
        fontSize: "1.1em",
        fontStyle: "italic",
        fontWeight: "bold",
        color: "#12efb5",
        pointerEvents: "none",
        transition: "0.1s",
    }
};

export default function (userOptions?: Partial<Options>) {
    const options = merge(defaults, userOptions);

    return (site: Site) => {
        const { buttonStyles, buttonText, resultStyles, resultText } = options;

        site.process([".html"], (page) => {
            page.document = copy(page.document);
        });
        
        function copy(document: any) {
            const headElem = document.head;
            const pres = document.getElementsByTagName("pre");
            
            Array.from(pres).forEach((pre: any, idx: number) => {
                pre.classList.add("codeCopy_pre");
                pre.classList.add(`codeCopy_pre_${idx}`);
                
                const copyElem = document.createElement("button");
                copyElem.classList.add("codeCopy_copy");
                copyElem.setAttribute("data-codeCopy", idx);
                copyElem.innerText = buttonText;
                copyElem.setAttribute("onclick", "copied(this)");
    
                const copiedText = document.createElement("span");
                copiedText.classList.add("codeCopy_copied");
                copiedText.innerText = resultText;
    
                copyElem.appendChild(copiedText);
                pre.appendChild(copyElem);
            });
    
            const styleElem = document.createElement("style");
            styleElem.innerHTML = `
                .codeCopy_pre {
                    position: relative;
                }
                .codeCopy_pre:hover .codeCopy_copy {
                    opacity: 1;
                }
    
                .codeCopy_copy {
                    box-sizing: border-box;
                    position: absolute;
                    top: ${buttonStyles.top};
                    right: ${buttonStyles.right};
                    width: ${buttonStyles.width};
                    height: ${buttonStyles.height};
                    padding: ${buttonStyles.padding};
                    background: ${buttonStyles.background};
                    border: ${buttonStyles.border};
                    outline: ${buttonStyles.outline};
                    font-size: ${buttonStyles.fontSize};
                    font-weight: ${buttonStyles.fontWeight};
                    color: ${buttonStyles.color};
                    cursor: pointer;
                    opacity: ${buttonStyles.opacity};
                    transition: ${buttonStyles.transition};
                }
                .codeCopy_copy:hover {
                    background: ${buttonStyles.backgroundHovered};
                }
    
                .codeCopy_copied {
                    position: absolute;
                    top: ${resultStyles.top};
                    right: ${resultStyles.right};
                    opacity: ${resultStyles.opacity};
                    font-size: ${resultStyles.fontSize};
                    font-style: ${resultStyles.fontStyle};
                    font-weight: ${resultStyles.fontWeight};
                    color: ${resultStyles.color};
                    pointer-events: ${resultStyles.pointerEvents};
                    transition: ${resultStyles.transition};
                }
            `;
            headElem.appendChild(styleElem);
            
            const scriptElem = document.createElement("script");
            scriptElem.innerHTML = `
                function copied(e) {
                    const copiedElem = e.getElementsByTagName("span")[0];
                    copiedElem.style.opacity = "1";
                    setTimeout(() => {
                        copiedElem.style.opacity = "0";
                    }, 2000);
                }
    
                window.addEventListener('DOMContentLoaded', () => {
                    const copyElems = document.querySelectorAll(".codeCopy_copy");
                    [].forEach.call(copyElems, (copyElem) => {
                        const idx = copyElem.getAttribute("data-codeCopy");
                        copyElem.addEventListener("click", (e) => {
                            const preElem = document.querySelector(".codeCopy_pre_" + idx);
                            const codeElem = preElem.getElementsByTagName("code")[0];
                            navigator.clipboard.writeText(codeElem.innerText);
                        });
                    });
                });
            `;
            headElem.appendChild(scriptElem);
    
            return document;
        }
    }

}